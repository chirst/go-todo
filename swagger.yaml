swagger: "2.0"
info:
  description: >
    The purpose of this application is to manage collections of todos owned by
    authenticated users.
  version: 1.0.0
  title: Todo API
host: localhost
basePath: /
schemes:
- http
tags:
- name: User
  description: >
    The User API provides ways to login and sign up Users who can own
    collections of Todos.
- name: Todo
  description: >
    The Todo API enables you to create, read, update, and delete Todos.
    Additionally, the Todo API offers actions to change the completion status of
    Todos.
definitions:
  schemas:
    Todo:
      properties:
        id:
          type: integer
          description: The primary key of the Todo
          example: 1
        name:
          type: string
          description: A short name or description of the Todo
          example: Get stuff done
        completed:
          type: string
          format: date-time
          description: >
            Timestamp of when the Todo was completed or null if incomplete
        userId:
          type: integer
          description: The primary key of the user who owns this Todo
          example: 1
    Priority:
      properties:
        id:
          type: integer
          description: The primary key of the Priority
          example: 1
        name:
          type: string
          description: The friendly name of the Priority
          example: Normal
        weight:
          type: integer
          description: A number to compare two priorities to each other. The
            higher the number the more priority.
          example: 2
    User:
      properties:
        id:
          type: integer
          description: The primary key of the User
          example: 1
        username:
          type: string
          description: >
            A unique human friendly name identifying the User. This name is
            used for authentication.
          example: gud username
paths:
  /login:
    post:
      summary: Login a User
      description: >
        Login provides a way of gaining access to protected routes given valid
        credentials
      operationId: LoginUser
      consumes:
      - application/json
      produces:
      - text/plain
      tags:
      - User
      parameters:
      - in: body
        name: body
        description: Login credentials
        required: true
        schema:
          type: object
          properties:
            username:
              type: string
              example: gud username
              maxLength: 256
              description: Unique human readable identifier for a User
            password:
              type: string
              example: passwordy1234
              maxLength: 256
              description: Secret key for authenticating a User
          required:
            - username
            - password
      responses:
        "200":
          description: Successfully logged in
          schema:
            type: string
            description: >
              JSON web token valid for a limited time. Used to access protected
              resources.
        "400":
          description: Invalid login body
        "403":
          description: Invalid login credentials
  /todos:
    get:
      summary: Get all todos for the current User
      description: >
        Returns a list of all todos belonging to the current authenticated user.
      operationId: GetTodos
      produces:
      - application/json
      tags:
      - Todo
      responses:
        "200":
          description: list of todos
          schema:
            type: array
            items:
              $ref: "#/definitions/schemas/Todo"
    post:
      summary: Add a single Todo
      description: Adds a todo belonging to the current authenticated user
      operationId: AddTodo
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - Todo
      parameters:
      - in: body
        name: body
        description: Details of the Todo to be added
        required: true
        schema:
          type: object
          properties:
            name:
              type: string
              description: A short name or description of the Todo
              example: Do some things
            completed:
              type: string
              format: date-time
              description: >
                The time the Todo was completed. Pass null or exclude parameter
                if the Todo is incomplete
            priorityId:
              type: integer
              description: The ID of the priority. The default is ID 2 or
                "normal" priority.
              default: 2
              example: 1
          required:
            - name
      responses:
        "201":
          description: todo that was created
          schema:
            $ref: "#/definitions/schemas/Todo"
  /todos/{todoId}:
    patch:
      summary: Update a single existing Todo
      description: >
        User owning the given Todo can optionally update one or many different
        properties of a single Todo matching the given todoId. Properties
        include completion status and the name.
      operationId: UpdateTodo
      consumes:
      - application/json
      produces:
      - text/plain
      tags:
      - Todo
      parameters:
      - in: body
        name: body
        description: What properties to be updated
        required: true
        schema:
          type: object
          properties:
            complete:
              type: bool
              description: >
                true to complete, false to incomplete, and omit to leave status
                alone.
              example: true
            name:
              type: string
              format: string
              description: >
                A short description of what the todo is. Omit to leave the name
                alone.
            priorityId:
              type: integer
              description: The ID of the priority to change to. Omit to leave
                the priority alone.
              example: 1
    delete:
      summary: Delete a single Todo
      description: >
        Marks the Todo as deleted meaning the Todo will not be included on get
        requests
      operationId: DeleteTodo
      produces:
      - text/plain
      tags:
      - Todo
      responses:
        "204":
          description: todo was successfully deleted
  /priorities:
    get:
      summary: Get all priorities
      description: Returns a list of all the priorities.
      operationId: GetPriorities
      produces:
      - application/json
      tags:
      - Todo
      responses:
        "200":
          description: list of priorities
          schema:
            type: array
            items:
              $ref: "#/definitions/schemas/Priority"
  /users:
    post:
      summary: Create a new User
      description: Provides a way of creating a new user who can own todos
      operationId: AddUser
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - User
      parameters:
      - in: body
        name: body
        description: Details of the User to be added
        required: true
        schema:
          type: object
          properties:
            username:
              type: string
              example: gud username
              maxLength: 256
              description: Unique human readable identifier for a User
            password:
              type: string
              example: passwordy1234
              maxLength: 256
              description: Secret key for authenticating a User
          required:
            - username
            - password
      responses:
        "201":
          description: User that was created
          schema:
            $ref: "#/definitions/schemas/User"
